[{"/home/eango/codeProjects/youtube-liveview-enhancer/src/components/FullscreenLiveviewChat/FullscreenLiveviewChat.js":"1","/home/eango/codeProjects/youtube-liveview-enhancer/src/components/FullscreenLiveviewChat/FullscreenLiveviewChat.stories.js":"2","/home/eango/codeProjects/youtube-liveview-enhancer/src/components/ChatMessage/ChatMessage.js":"3","/home/eango/codeProjects/youtube-liveview-enhancer/src/App.js":"4","/home/eango/codeProjects/youtube-liveview-enhancer/src/LiveChatListener.js":"5","/home/eango/codeProjects/youtube-liveview-enhancer/src/index.js":"6","/home/eango/codeProjects/youtube-liveview-enhancer/src/components/ChatList/ChatList.js":"7","/home/eango/codeProjects/youtube-liveview-enhancer/src/components/LiveviewChat/LiveviewChat.stories.js":"8"},{"size":791,"mtime":1606797344545,"results":"9","hashOfConfig":"10"},{"size":815,"mtime":1606797165974,"results":"11","hashOfConfig":"10"},{"size":118,"mtime":1606628744442,"results":"12","hashOfConfig":"10"},{"size":782,"mtime":1606781390904,"results":"13","hashOfConfig":"10"},{"size":2669,"mtime":1606616417450,"results":"14","hashOfConfig":"10"},{"size":402,"mtime":1606616692323,"results":"15","hashOfConfig":"10"},{"size":340,"mtime":1606628850405,"results":"16","hashOfConfig":"10"},{"size":0,"mtime":1606627826213,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"yussv2",{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/eango/codeProjects/youtube-liveview-enhancer/src/components/FullscreenLiveviewChat/FullscreenLiveviewChat.js",["37","38"],"/home/eango/codeProjects/youtube-liveview-enhancer/src/components/FullscreenLiveviewChat/FullscreenLiveviewChat.stories.js",["39"],"import React from 'react'\nimport styled from 'styled-components'\nimport FullscreenLiveviewChat from './FullscreenLiveviewChat'\n\n// Just making a simple container with relative positioning, this should mimic the youtube player wrapper container good enough so\n// can test drag/drop stuff on the storybook easily.\nconst Container = styled.div`\n  width: 80%;\n  height: 50%;\n  position: relative;\n`\nconst Img = styled.img`\n  height: 100%;\n  width: 100%;\n`\n\nexport default {\n  title: 'FullscreenLiveviewChat',\n  component: FullscreenLiveviewChat,\n}\n\n// Putting random haachama stream in background as picture to help better simulate the ui.\nexport const FullscreenLiveviewOverlay = () => {\n  return (\n    <Container>\n      <Img src=\"/haachamastream.png\" alt=\"\" />\n      <FullscreenLiveviewChat />\n    </Container>\n  )\n}\n","/home/eango/codeProjects/youtube-liveview-enhancer/src/components/ChatMessage/ChatMessage.js",["40"],"import React from 'react'\n\nconst ChatMessage = message => {\n  return <div>message</div>\n}\n\nexport default ChatMessage\n","/home/eango/codeProjects/youtube-liveview-enhancer/src/App.js",["41"],"/home/eango/codeProjects/youtube-liveview-enhancer/src/LiveChatListener.js",["42","43","44","45"],"// Mutation observer that will observe for new live chats.\n// When a newly added live chat is detected a runtime message will be sent on the extension bus for the app to then catch.\n\nconst listenToLiveChat = () => {\n  const observeLiveChatMessages = liveChatIframe => {\n    const liveChatContainer = liveChatIframe.contentDocument\n\n    const livechatMessagesObserver = new MutationObserver((mutations, _) => {\n      // Loop through all mutations that occured, filter mutations by recently added nodes, and look for livestream chats and super chats.\n      for (let i = 0; i < mutations.length; ++i) {\n        for (let j = 0; j < mutations[i].addedNodes.length; ++j) {\n          const addednode = mutations[i].addedNodes[j]\n\n          const liveChatNodeAdded = addednode.classList.contains('yt-live-chat-item-list-renderer')\n\n          const superChatAdded = addednode.classList.contains('yt-live-chat-ticker-paid-message-item-renderer')\n\n          // If newly added node is a live chat fire live chat event to browser runtime.\n          if (liveChatNodeAdded) {\n            console.log('DETECTED A LIVE CHAT')\n            console.log(addednode)\n          }\n\n          // If newly added node is a super chat fire super chat event to browser runtime.\n          if (superChatAdded) {\n            console.log('DETECTED A SUPER CHAT')\n            console.log(addednode)\n          }\n        }\n      }\n    })\n\n    // Have the observer observe foo for changes in chiluren\n    livechatMessagesObserver.observe(liveChatContainer, {\n      childList: true,\n      subtree: true\n    })\n  }\n\n  // Set up the mutation observer to await for the youtube livechat to appear on the screen.\n  const chatAppInitializedObserver = new MutationObserver((_, mutationObserverInstance) => {\n    const iframe = Array.from(document.getElementsByTagName('iframe')).find(i =>\n      i.classList.contains('ytd-live-chat-frame')\n    )\n    if (!iframe || !iframe.contentDocument) return\n\n    // If not live chat tags are found, ie no-one has commented in the live chat, then there is nothing to observe and parse so keep waiting.\n    const isLiveChatStarted = iframe.contentDocument.getElementsByTagName('yt-live-chat-text-message-renderer').length\n    if (!isLiveChatStarted) return\n\n    // Live chat is started, start observing the live chat iframe for changes.\n    observeLiveChatMessages(iframe)\n\n    // We found the live-chat can stop observing for its initialization now.\n    mutationObserverInstance.disconnect()\n  })\n\n  // Observe for live chat window to be initialized\n  chatAppInitializedObserver.observe(document, {\n    childList: true,\n    subtree: true\n  })\n}\n\nexport default listenToLiveChat\n","/home/eango/codeProjects/youtube-liveview-enhancer/src/index.js",[],"/home/eango/codeProjects/youtube-liveview-enhancer/src/components/ChatList/ChatList.js",[],"/home/eango/codeProjects/youtube-liveview-enhancer/src/components/LiveviewChat/LiveviewChat.stories.js",[],{"ruleId":"46","severity":2,"message":"47","line":3,"column":29,"nodeType":"48","endLine":3,"endColumn":40},{"ruleId":"46","severity":2,"message":"49","line":4,"column":30,"nodeType":"48","endLine":4,"endColumn":55},{"ruleId":"50","severity":1,"message":"51","line":19,"column":36,"nodeType":"52","messageId":"53","endLine":19,"endColumn":37,"fix":"54"},{"ruleId":"55","severity":1,"message":"56","line":3,"column":21,"nodeType":"57","messageId":"58","endLine":3,"endColumn":28},{"ruleId":"50","severity":1,"message":"51","line":7,"column":21,"nodeType":"52","messageId":"53","endLine":7,"endColumn":22,"fix":"59"},{"ruleId":"60","severity":1,"message":"61","line":20,"column":13,"nodeType":"62","messageId":"53","endLine":20,"endColumn":24},{"ruleId":"60","severity":1,"message":"61","line":21,"column":13,"nodeType":"62","messageId":"53","endLine":21,"endColumn":24},{"ruleId":"60","severity":1,"message":"61","line":26,"column":13,"nodeType":"62","messageId":"53","endLine":26,"endColumn":24},{"ruleId":"60","severity":1,"message":"61","line":27,"column":13,"nodeType":"62","messageId":"53","endLine":27,"endColumn":24},"import/no-unresolved","Unable to resolve path to module 'react-dnd'.","Literal","Unable to resolve path to module 'react-dnd-html5-backend'.","comma-dangle","Unexpected trailing comma.","Property","unexpected",{"range":"63","text":"64"},"no-unused-vars","'message' is defined but never used. Allowed unused args must match /^_/u.","Identifier","unusedVar",{"range":"65","text":"64"},"no-console","Unexpected console statement.","MemberExpression",[540,541],"",[161,162]]